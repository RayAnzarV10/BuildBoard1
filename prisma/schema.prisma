// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}

model Organization {
  id                      String              @id @default(uuid())
  connectAccountId        String?             @default("")
  // customerId              String?             @default("")           
  name                    String          
  logo                    String              @db.Text
  description             String              @db.Text
  email                   String              @db.Text
  phone                   String          
  address                 String          
  city                    String          
  primary_color           String              @default("#FFFFFFF")
  zipCode                 String          
  state                   String          
  country                 String              
  whiteLabel              Boolean             @default(true)
  users                   User[]          
  client                  Client[]
  addOns                  AddOns[]          
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  projects                Project[]
  supplier                Supplier[]
  invitation              Invitation[]
  SubAccount              SubAccount[]
  subscription            Subscription?
  notification            Notification[]
  SidebarOption           OrgSidebarOption[]
  teammembers             String
  financingType           String              @db.Text
  productsAndServices     String              @db.Text
  pains                   String              @db.Text
  expectations            String              @db.Text
  paymentMethods          String              @db.Text

  @@index([id])
}

model SubAccount {
  id               String                    @id @default(uuid())
  connectAccountId String?                   @default("")
  name             String
  subAccountLogo   String                    @db.Text
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  companyEmail     String                    @db.Text
  companyPhone     String
  goal             Int                       @default(5)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  orgId            String
  org              Organization              @relation(fields: [orgId], references: [id], onDelete: Cascade)
  SidebarOption    SubAccountSidebarOption[]
  Permissions      Permissions[]
  mediaExpense     MediaExpense[]
  mediaIncome      MediaIncome[]
  notification     Notification[]

  @@index([orgId])
}

model OrgSidebarOption {
  id          String            @id @default(uuid())
  name        String            @default("Menu")
  link        String            @default("#")
  icon        Icon              @default(info)
  orgId       String
  org         Organization?     @relation(fields: [orgId], references: [id], onDelete: Cascade)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([orgId])
}

model SubAccountSidebarOption {
  id           String           @id @default(uuid())
  name         String           @default("Menu")
  link         String           @default("#")
  subAccountId String?
  icon         Icon             @default(info)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  SubAccount   SubAccount?      @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
}

model MediaExpense {
  id              String        @id @default(uuid())
  subAccountId    String
  name            String
  type            String?
  link            String        @unique
  expenseId       String
  expense         Expense       @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  subAccount      SubAccount    @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([expenseId])
  @@index([subAccountId])
}

model MediaIncome {
  id              String        @id @default(uuid())
  subAccountId    String
  subAccount      SubAccount    @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  name            String
  type            String?
  link            String        @unique
  incomeId        String
  income          Income        @relation(fields: [incomeId], references: [id], onDelete: Cascade)

  @@index([incomeId])
  @@index([subAccountId])
}

model AddOns {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  name            String
  active          Boolean           @default(false)
  priceId         String            @unique
  orgId           String?
  org             Organization?     @relation(fields: [orgId], references: [id])

  @@index([orgId])
}

model Notification {
  id                String            @id @default(uuid())
  notification      String
  orgId             String
  subAccountId      String?
  userId            String

  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  org               Organization      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  subAccount        SubAccount?       @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([orgId])
  @@index([userId])
  @@index([subAccountId])
}

enum Plan {
  price_1OYxkqFj9oKEERu1NbKUxXxN
  price_1OYxkqFj9oKEERu1KfJGWxgN
}

model Subscription {
  id                      String            @id @default(uuid())
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  plan                    Plan?     
  price                   String?     
  active                  Boolean           @default(false)

  priceId                 String      
  customerId              String      
  currentPeriodEndDate    DateTime      
  subscritiptionId        String            @unique

  orgId                   String?           @unique
  org                     Organization?     @relation(fields: [orgId], references: [id])

  @@index([customerId])
}

enum Role {
  ORG_OWNER
  ORG_ADMIN
  SUBACCOUNT_USER
  SUBACCOUNT_GUEST
}

model User {
  id                  String              @id @default(uuid())
  name                String      
  avatarUrl           String      
  email               String              @unique
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  role                Role                @default(SUBACCOUNT_USER)
  orgId               String?
  org                 Organization?       @relation(fields: [orgId], references: [id], onDelete: Cascade)
  notification        Notification[]
  Permissions         Permissions[]

  @@index([orgId])
}

model Permissions {
  id              String        @id @default(uuid())
  email           String    
  User            User          @relation(fields: [email], references: [email], onDelete: Cascade)
  subAccountId    String    
  SubAccount      SubAccount    @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  access          Boolean

  @@index([subAccountId])
  @@index([email])
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

model Invitation {
  id          String                @id @default(uuid())
  email       String                @unique
  orgId       String
  org         Organization          @relation(fields: [orgId], references: [id], onDelete: Cascade)
  status      InvitationStatus      @default(PENDING)
  role        Role                  @default(SUBACCOUNT_USER)

  @@index([orgId])
}

enum ProjectStatus {
  Planning
  In_Progress
  Completed
}

model Project {
  id                    String                @id @default(uuid())
  orgId                 String
  org                   Organization          @relation(fields: [orgId], references: [id], onDelete: Cascade)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  name                  String
  status                ProjectStatus
  location              String                @db.Text
  est_completion        DateTime
  budget                Float
  description           String                @db.Text
  incomes               Income[]
  expenses              Expense[]

  @@index([orgId])
}

model Client {
  id                      String              @id @default(uuid())
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  name                    String
  phone                   String
  adress                  String?
  city                    String?
  state                   String?
  country                 String?
  description             String              @db.Text
  orgId                   String
  org                     Organization        @relation(fields: [orgId], references: [id], onDelete: Cascade)
  incomes                 Income[]

  @@index([orgId])
}

model Supplier {
  id                      String               @id @default(uuid())
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  name                    String
  phone                   String
  adress                  String?
  city                    String?
  state                   String?
  country                 String?
  description             String               @db.Text
  orgId                   String
  org                     Organization         @relation(fields: [orgId], references: [id], onDelete: Cascade)
  expense                 Expense[]

  @@index([orgId])
}

model Income {
  id String @id @default(uuid())
  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  date DateTime
  clientId String 
  client Client @relation(fields: [clientId], references: [id])
  amount Float
  tax Float
  description String @db.Text
  paymentMethod String
  currency String
  exchangeRate Float
  category String
  inv_number String?
  receipt_path MediaIncome[]

  @@index([projectId])
  @@index([clientId])
}

model Expense {
  id String @id @default(uuid())
  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  date DateTime
  supplierId String
  supplier Supplier @relation(fields: [supplierId], references: [id])
  name String
  rfc String? @db.Text
  amount Float
  description String @db.Text
  tax1 Float
  tax2 Float
  paymentMethod String
  currency String
  exchangeRate Float
  category String
  inv_number String?
  recurrence String?
  receipt_path MediaExpense[]

  @@index([projectId])
  @@index([supplierId])
}