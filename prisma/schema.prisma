// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}


model Organization {
  id                      String              @id @default(uuid())
  connectAccountId        String?             @default("")
  customerId              String?             @default("")           
  name                    String          
  logo                    String              @db.Text
  description             String              @db.Text
  email                   String              @db.Text
  phone                   String          
  address                 String          
  city                    String          
  zipCode                 String          
  state                   String          
  country                 String              
  users                   User[]          
  addOns                  AddOns[]          
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  projects                Project[]
  invitation              Invitation[]
  subscription            Subscription?
  notification            Notification[]
  teammembers             String
  financingType           String              @db.Text
  productsAndServices     String              @db.Text
  pains                   String              @db.Text
  expectations            String              @db.Text
  paymentMethods          String              @db.Text
  transactions            Transaction[]
  parties                 Party[]
  mediaAttachment MediaAttachment[]

  @@index([id])
}

model AddOns {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  name            String
  active          Boolean           @default(false)
  priceId         String            @unique
  orgId           String?
  org             Organization?     @relation(fields: [orgId], references: [id])

  @@index([orgId])
}

model Notification {
  id                String            @id @default(uuid())
  notification      String
  orgId             String
  userId            String

  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  org               Organization      @relation(fields: [orgId], references: [id], onDelete: Cascade)

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([orgId])
  @@index([userId])
}

enum Plan {
  price_1OYxkqFj9oKEERu1NbKUxXxN
  price_1OYxkqFj9oKEERu1KfJGWxgN
}

model Subscription {
  id                      String            @id @default(uuid())
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  plan                    Plan?     
  price                   String?     
  active                  Boolean           @default(false)

  priceId                 String      
  customerId              String      
  currentPeriodEndDate    DateTime      
  subscritiptionId        String            @unique

  orgId                   String?           @unique
  org                     Organization?     @relation(fields: [orgId], references: [id])

  @@index([customerId])
}

enum Role {
  ORG_OWNER
  ORG_ADMIN
  ORG_USER
}

model User {
  id                  String              @id @default(uuid())
  name                String      
  avatarUrl           String      
  email               String              @unique
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  role                Role                @default(ORG_USER)
  orgId               String?
  org                 Organization?       @relation(fields: [orgId], references: [id], onDelete: Cascade)
  notification        Notification[]
  Permissions         Permissions[]

  @@index([orgId])
}

model Permissions {
  id              String        @id @default(uuid())
  email           String    
  user            User          @relation(fields: [email], references: [email], onDelete: Cascade)
  access          Boolean

  @@index([email])
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

model Invitation {
  id          String                @id @default(uuid())
  email       String                @unique
  orgId       String
  org         Organization          @relation(fields: [orgId], references: [id], onDelete: Cascade)
  status      InvitationStatus      @default(PENDING)
  role        Role                  @default(ORG_USER)

  @@index([orgId])
}

enum ProjectStatus {
  Planning
  
  In_Progress
  Completed
}

model Project {
  id                    String                @id @default(uuid())
  number                Int                   
  orgId                 String
  org                   Organization          @relation(fields: [orgId], references: [id], onDelete: Cascade)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  name                  String
  status                ProjectStatus
  location              String                @db.Text
  det_location          Json?                
  est_completion        DateTime    
  budget                Float
  description           String                @db.Text
  transactions          Transaction[]
  clientId              String?
  client                Party?                @relation(fields: [clientId], references: [id])

  @@unique([orgId, number])
  @@index([orgId])
  @@index([clientId])
}

enum PartyType {
  CLIENT
  SUPPLIER
}

model Party {
  id            String          @id @default(uuid())
  type          PartyType       // Distingue entre cliente y proveedor
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String
  phone         String
  email         String?         // Opcional ya que los proveedores podrían no tenerlo
  company       String?         // Para clientes que representen empresas
  address       String?
  city          String?
  state         String?
  country       String?
  description   String?         @db.Text
  orgId         String
  org           Organization    @relation(fields: [orgId], references: [id], onDelete: Cascade)
  transactions  Transaction[]   // Relación con transacciones
  projects      Project[]       // Solo relevante para clientes

  @@index([orgId])
  @@index([type]) // Útil para filtrar por tipo
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum PaymentMethod {
  CASH
  TRANSFER
  CREDIT_CARD
  DEBIT_CARD
  OTHER
}

enum Currency {
  MXN
  USD
  EUR
  OTHER
}

model Transaction {
  id            String         @id @default(uuid())
  type          TransactionType
  orgId         String
  org           Organization   @relation(fields: [orgId], references: [id], onDelete: Cascade)
  projectId     String
  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  date          DateTime
  partyId       String        // clientId o supplierId
  party         Party         @relation(fields: [partyId], references: [id]) // Unifica Client y Supplier
  amount        Float
  taxes         TransactionTax[]
  description   String        @db.Text
  paymentMethod PaymentMethod
  currency      Currency
  exchangeRate  Float
  category      String        // O usar enum si las categorías son fijas
  invoiceNumber String?
  recurrence    String?
  attachments   MediaAttachment[]

  @@index([projectId])
  @@index([partyId])
  @@index([orgId])
}

model TransactionTax {
  id            String     @id @default(uuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  name          String     
  rate          Float
  amount        Float

  @@index([transactionId])
}

model MediaAttachment {
  id              String        @id @default(uuid())
  name            String        // Nombre original del archivo
  type            String?       // Tipo de archivo (pdf, jpg, etc)
  s3Key           String        @unique  // Ruta en S3
  size            Int?          // Tamaño en bytes
  transactionId   String
  transaction     Transaction   @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  orgId           String        // Añadida relación directa con org
  org             Organization  @relation(fields: [orgId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([transactionId])
  @@index([orgId])    // Añadido índice para orgId
}